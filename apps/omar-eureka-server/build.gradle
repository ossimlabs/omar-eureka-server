buildscript {
  ext {
    baseImage = "omar-base"
    dockerStatementsOverride = {
       [
          "FROM ${project.dockerNamespaceUrl}${project.ext.baseImage}:${project.dockerAppTag}",
          "COPY ${project.name}-${buildVersion}-${buildVersionTag}.jar \$HOME/",
          "EXPOSE 8761",
          "WORKDIR \$HOME",
      	  "USER root",
          "RUN chmod 755 /home/omar && chmod 644 /home/omar/*",
          "USER 1001",
          "CMD java -Xms256m -Xmx1024m -Djava.security.egd=file:/dev/./urandom -jar ./${project.name}-${buildVersion}-${buildVersionTag}.jar"

       ]
     }
  }

  if(System.env.OMAR_COMMON_PROPERTIES)
  {
      apply from: System.env.OMAR_COMMON_PROPERTIES
  }

  ext {
	springBootVersion = "${springBootV}"
  }

  repositories {
      maven { url "${ossimMavenProxy}" }
      if( Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
        mavenLocal()
        mavenCentral()
      }
   }
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
}


apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: "maven"

sourceCompatibility = 1.8
targetCompatibility = 1.8
group "io.ossim.omar.apps"


repositories {
  maven { url "${ossimMavenProxy}" }
  if( Boolean.parseBoolean( System.env.WWW_CONNECTED ) ) {
    mavenLocal()
    mavenCentral()
  }
}


dependencies {
  compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminStarterClientV}"
  compile('org.springframework.cloud:spring-cloud-starter-config')
  compile('org.springframework.cloud:spring-cloud-starter-eureka-server')
	compile('org.codehaus.groovy:groovy')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependencyV}"
	}
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java
    }
  }
}
