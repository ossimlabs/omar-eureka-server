buildscript {
   repositories {
      mavenLocal()
      maven { url ossimMavenProxy }
   }
	dependencies {
		// classpath 'com.github.skhatri:gradle-s3-plugin:1.0.4'
		// classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.7.5"
	}
}

plugins {
  id 'org.springframework.boot' version '2.1.17.RELEASE'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'groovy'
  id "com.github.ben-manes.versions" version "0.36.0"
  id "org.sonarqube" version "3.1"
}

   project.ext {
     gitBranch = getCurrentGitBranch(project)
     buildVersionTag = gitBranch == "master" ? "RELEASE" : "SNAPSHOT"
    }

version "${buildVersion}-${buildVersionTag}"

ext {
	dockerBuildDir = "${ rootProject.projectDir }/docker"
	jarDestination = "${ project.projectDir }/build/libs/${ project.name }-${ version }.jar"
}

sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	maven { url ossimMavenProxy }
}

dependencies {
	implementation 'org.codehaus.groovy:groovy'
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server'
	implementation 'org.springframework.cloud:spring-cloud-config-server'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'	
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

// Copy the built jar to the docker directory
task copyJarToDockerDir( type: Copy ) {
	doFirst {
		println "Copying ${ jarDestination } to ${ dockerBuildDir }"
	}
	from jarDestination
	into dockerBuildDir
}

String getConfigurationProperty( String envVar, String sysProp )
{
	System.getenv( envVar ) ?: project.findProperty( sysProp )
}

String getCurrentGitBranch(Project project) {
    def gitBranch = "Unknown branch"
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git rev-parse --abbrev-ref HEAD'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            gitBranch = result.text.trim()
        }
    } catch (e) {
        e.printStackTrace()
    }
    return gitBranch
}
